


*************************************************************************************************************
site
title
*************************************************************************************************************

=============================================================================================================

01.

  01.001.
    
    01.001.0001.
    
  01.002.
    
02.

03.

=============================================================================================================

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
01.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
01.001.
=============================================================================================================

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

################################################################

01.001.0001.

----------------------------------------------------------------
/*

*/


----------------------------------------------------------------

>>>

>>>

################################################################

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@








@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

freecodecamp.com

HTML/CSS/BOOTSTRAP/JS

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

#HTML

001 - Say Hello to HTML Elements
002 - Headline with the h2 Element
003 - Inform with the Paragraph Element 
004 - Uncomment HTML 
005 - Comment out HTML
006 - Fill in the Blank with Placeholder Text
007 - Delete HTML Elements
008 - Change the Color of Text
009 - Use CSS Selectors to Style Elements
010 - Use a CSS Class to Style an Element
011 - Style Multiple Elements with a CSS Class
012 - Change the Font Size of an Element
013 - Set the Font Family of an Element 
014 - Import a Google Font
015 - Specify How Fonts Should Degrade
016 - Add Images to your Website
017 - Size your Images
018 - Add Borders Around your Elements
019 - Add Rounded Corners with a Border Radius
020 - Make Circular Images with a Border Radius
021 - Link to External Pages with Anchor Elements
022 - Nest an Anchor Element within a Paragraph
023 - Make Dead Links using the Hash Symbol
024 - Turn an Image into a Link
025 - Create a Bulleted Unordered List
026 - Create an Ordered List
027 - Create a Text Field
028 - Add Placeholder Text to a Text Field 
029 - Create a Form Element
030 - Add a Submit Button to a Form
031 - Use HTML5 to Require a Field
032 - Create a Set of Radio Buttons
033 - Create a Set of Checkboxes
034 - Check Radio Buttons and Checkboxes by Default
035 - Nest Many Elements within a Single Div Element
036 - Give a Background Color to a Div Element
037 - Set the ID of an Element
038 - Use an ID Attribute to Style an Element

#CSS

039 - Adjusting the Padding of an Element
040 - Adjust the Margin of an Element
041 - Add a Negative Margin to an Element
042 - Add Different Padding to Each Side of an Element
043 - Add Different Margins to Each Side of an Element 
044 - Use Clockwise Notation to Specify the Padding of an Element
045 - Use Clockwise Notation to Specify the Margin of an Element
046 - Style the HTML Body Element
047 - Inherit Styles from the Body Element
048 - Prioritize One Style Over Another 
049 - Override Styles in Subsequent CSS
050 - Override Class Declarations by Styling ID Attributes
051 - Override Class Declarations with Inline Styles
052 - Override All Other Styles by using Important
053 - Use Hex Code for Specific Colors
054 - Use Hex Code to Mix Colors
055 - Use Abbreviated Hex Code
056 - Use RGB values to Color Elements
057 - Use RGB to Mix Colors

#BOOTSTRAP

058 - Use Responsive Design with Bootstrap Fluid Containers
059 - Make Images Mobile Responsive 
060 - Center Text with Bootstrap
061 - Create a Bootstrap Button
062 - Create a Block Element Bootstrap Button
063 - Taste the Bootstrap Button Color Rainbow
064 - Call out Optional Actions with Button Info
065 - Warn your Users of a Dangerous Action
066 - Use the Bootstrap Grid to Put Elements Side By Side
067 - Ditch Custom CSS for Bootstrap
068 - Use Spans for Inline Elements
069 - Create a Custom Heading
070 - Add Font Awesome Icons to our Buttons
071 - Add Font Awesome Icons to all of our Buttons
072 - Responsively Style Radio Buttons
073 - Responsively Style Checkboxes
074 - Style Text Inputs as Form Controls
075 - Line up Form Elements Responsively with Bootstrap

#JQUERY

076 - Create a Bootstrap Headline
077 - House our page within a Bootstrap Container Fluid Div
078 - Create a Bootstrap Row
079 - Split your Bootstrap Row 
080 - Create Bootstrap Wells 
081 - Add Elements within your Bootstrap Wells
082 - Apply the Default Bootstrap Button Style
083 - Create a Class to Target with jQuery Selectors
084 - Add ID Attributes to Bootstrap Elements
085 - Label Bootstrap Wells
086 - Give Each Element a Unique ID
087 - Label Bootstrap Buttons
088 - Use Comments to Clarify Code
089 - Learn how Script Tags and Document Ready Work
090 - Target HTML Elements with Selectors Using jQuery
091 - Target Elements by Class Using jQuery
092 - Target Elements by ID Using jQuery
093 - Delete your jQuery Functions
094 - Target the same element with multiple jQuery Selectors
095 - Remove Classes from an element with jQuery
096 - Change the CSS of an Element Using jQuery
097 - Disable an Element Using jQuery
098 - Change Text Inside an Element Using jQuery
099 - Remove an Element Using jQuery
100 - Use appendTo to Move Elements with jQuery
101 - Clone an Element Using jQuery
102 - Target the Parent of an Element Using jQuery
103 - Target the Children of an Element Using jQuery
104 - Target a Specific Child of an Element Using jQuery 
105 - Target Even Numbered Elements Using jQuery
106 - Use jQuery to Modify the Entire Page

#JAVASCRIPT

107 - Comment your JavaScript Code
108 - Declare JavaScript Variables
109 - Storing Values with the Assignment Operator
110 - Initializing Variables with the Assignment Operator
111 - Understanding Uninitialized Variables
112 - Understanding Case Sensitivity in Variables
113 - Add Two Numbers with JavaScript
114 - Subtract One Number from Another with JavaScript 
115 - Multiply Two Numbers with JavaScript
116 - Divide One Number by Another with JavaScript
117 - Increment a Number with JavaScript
118 - Decrement a Number with JavaScript
119 - Create Decimal Numbers with JavaScript
120 - Multiply Two Decimals with JavaScript
121 - Divide one Decimal by Another with JavaScript
122 - Finding a Remainder in JavaScript
123 - Compound Assignment With Augmented Addition
124 - Compound Assignment With Augmented Subtraction
125 - Compound Assignment With Augmented Multiplication
126 - Compound Assignment With Augmented Division
127 - Convert Celsius to Fahrenheit
128 - Declare String Variables
129 - Escaping Literal Quotes in Strings
130 - Quoting Strings with Single Quotes
131 - Escape Sequences in Strings 
132 - Concatenating Strings with Plus Operator
133 - Concatenating Strings with the Plus Equals Operator
134 - Constructing Strings with Variables
135 - Appending Variables to Strings
136 - Find the Length of a String
137 - Use Bracket Notation to Find the First Character in a String
138 - Understand String Immutability
139 - Use Bracket Notation to Find the Nth Character in a String
140 - Use Bracket Notation to Find the Last Character in a String
141 - Use Bracket Notation to Find the NthtoLast Character in a String
142 - Word Blanks
143 - Store Multiple Values in one Variable using JavaScript Arrays
144 - Nest one Array within Another Array 
145 - Access Array Data with Indexes
146 - Modify Array Data With Indexes
147 - Access MultiDimensional Arrays With Indexes
148 - Manipulate Arrays With push
149 - Manipulate Arrays With pop
150 - Manipulate Arrays With shift
151 - Manipulate Arrays With unshift
152 - Shopping List
153 - Write Reusable JavaScript with Functions
154 - Passing Values to Functions with Arguments
155 - Global Scope and Functions
156 - Local Scope and Functions
157 - Global vs Local Scope in Functions
158 - Return a Value from a Function with Return
159 - Assignment with a Returned Value
160 - Stand in Line
161 - Understanding Boolean Values
162 - Use Conditional Logic with If Statements
163 - Comparison with the Equality Operator
164 - Comparison with the Strict Equality Operator
165 - Operator
166 - Comparison with the Strict Inequality Operator
167 - Comparison with the Greater Than Operator
168 - Comparison with the Greater Than Or Equal To Operator
169 - Comparison with the Less Than Operator
170 - Comparison with the Less Than Or Equal To Operator
171 - Comparisons with the Logical And Operator
172 - Comparisons with the Logical Or Operator
173 - Introducing Else Statements
174 - Introducing Else If Statements
175 - Logical Order in If Else Statements
176 - Chaining If Else Statements
177 - Golf Code
178 - Selecting from many options with Switch Statements
179 - Adding a default option in Switch statements
180 - Multiple Identical Options in Switch Statements
181 - Replacing If Else Chains with Switch
182 - Returning Boolean Values from Functions
183 - Return Early Pattern for Functions
184 - Counting Cards
185 - Build JavaScript Objects
186 - Accessing Objects Properties with the Dot Operator
187 - Accessing Objects Properties with Bracket Notation
188 - Accessing Objects Properties with Variables
189 - Updating Object Properties
190 - Add New Properties to a JavaScript Object
191 - Delete Properties from a JavaScript Object
192 - Using Objects for Lookups
193 - Testing Objects for Properties
194 - Manipulating Complex Objects
195 - Accessing Nested Objects
196 - Iterate with JavaScript For Loops
197 - Iterate Odd Numbers With a For Loop
198 - Count Backwards With a For Loop
199 - Iterate Through an Array with a For Loop
200 - Nesting For Loops
201 - Iterate with JavaScript While Loops
202 - Profile Lookup
203 - Generate Random Fractions with JavaScript
204 - Generate Random Whole Numbers within a Range
205 - Sift through Text with Regular Expressions
206 - Find Whitespace with Regular Expressions
207 - Invert Regular Expression Matches with JavaScript
208 - Declare JavaScript Objects as Variables
209 - Construct JavaScript Objects with Functions
210 - Make Instances of Objects with a Constructor Function
211 - Make Unique Objects by Passing Parameters to our Constructor 
212 - Make Object Properties Private
213 - Iterate over Arrays with map
214 - Condense arrays with reduce
215 - Filter Arrays with filter
216 - Sort Arrays with sort
217 - Reverse Arrays with reverse
218 - Concatenate Arrays with concat
219 - Split Strings with split
220 - Join Strings with join
221 - Reverse a String
222 - Factorialize a Number
223 - Check for Palindromes
224 -
225 -
226 -
227 -
228 -
229 -
230 -

----------------------------------------

201 - Iterate with JavaScript While Loops

----------------------------------------

You can run the same code multiple times by using a loop.

Another type of JavaScript loop is called a "while loop", because it runs "while" a specified condition is true and stops once that condition is no longer true.

var ourArray = [];
var i = 0;
while(i < 5) {
  ourArray.push(i);
  i++;
}
Let's try getting a while loop to work by pushing values to an array.

Instructions
Push the numbers 0 through 4 to myArray using a while loop.

You should be using a while loop for this.
myArray should equal [0,1,2,3,4].

----------------------------------------

// Setup
var myArray = [];

// Only change code below this line.

var i = 0;

while(i < 5) {
  myArray.push(i);
  i++;
}

----------------------------------------

// Setup
var myArray = [];

// Only change code below this line.

var i = 0;

while(i < 5) {
  myArray.push(i);
  i++;
}

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

202 - Profile Lookup

----------------------------------------

We have an array of objects representing different people in our contacts lists.

A lookUpProfile function that takes firstName and a property (prop) as arguments has been pre-written for you.

The function should check if firstName is an actual contact's firstName and the given property (prop) is a property of that contact.

If both are true, then return the "value" of that property.

If firstName does not correspond to any contacts then return "No such contact"

If prop does not correspond to any valid properties then return "No such property"

"Kristian", "lastName" should return "Vos"
"Sherlock", "likes" should return ["Intriguing Cases", "Violin"]
"Harry","likes" should return an array
"Bob", "number" should return "No such contact"
"Akira", "address" should return "No such property"

----------------------------------------

//Setup
var contacts = [
    {
        "firstName": "Akira",
        "lastName": "Laine",
        "number": "0543236543",
        "likes": ["Pizza", "Coding", "Brownie Points"]
    },
    {
        "firstName": "Harry",
        "lastName": "Potter",
        "number": "0994372684",
        "likes": ["Hogwarts", "Magic", "Hagrid"]
    },
    {
        "firstName": "Sherlock",
        "lastName": "Holmes",
        "number": "0487345643",
        "likes": ["Intriguing Cases", "Violin"]
    },
    {
        "firstName": "Kristian",
        "lastName": "Vos",
        "number": "unknown",
        "likes": ["Javascript", "Gaming", "Foxes"]
    }
];


function lookUpProfile(firstName, prop){
// Only change code below this line
  
  for(var i=0;i<contacts.length;i++){
  if(contacts[i].firstName === firstName){
  if(contacts[i].hasOwnProperty(prop)){

  return contacts[i][prop];
} else {
  return "No such property";
}
 }
}
  
  return "No such contact";

// Only change code above this line
}

// Change these values to test your function
lookUpProfile("Bob", "number");


----------------------------------------

//Setup
var contacts = [
    {
        "firstName": "Akira",
        "lastName": "Laine",
        "number": "0543236543",
        "likes": ["Pizza", "Coding", "Brownie Points"]
    },
    {
        "firstName": "Harry",
        "lastName": "Potter",
        "number": "0994372684",
        "likes": ["Hogwarts", "Magic", "Hagrid"]
    },
    {
        "firstName": "Sherlock",
        "lastName": "Holmes",
        "number": "0487345643",
        "likes": ["Intriguing Cases", "Violin"]
    },
    {
        "firstName": "Kristian",
        "lastName": "Vos",
        "number": "unknown",
        "likes": ["Javascript", "Gaming", "Foxes"]
    }
];


function lookUpProfile(firstName, prop){
// Only change code below this line
  
  for(var i=0;i<contacts.length;i++){
  if(contacts[i].firstName === firstName){
  if(contacts[i].hasOwnProperty(prop)){

  return contacts[i][prop];
} else {
  return "No such property";
}
 }
}
  
  return "No such contact";

// Only change code above this line
}

// Change these values to test your function
lookUpProfile("Bob", "number");


----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

203 - Generate Random Fractions with JavaScript

----------------------------------------

Random numbers are useful for creating random behavior.

JavaScript has a Math.random() function that generates a random decimal number between 0 (inclusive) and not quite up to 1 (exclusive). Thus Math.random() can return a 0 but never quite return a 1

Note
Like Storing Values with the Equal Operator, all function calls will be resolved before the return executes, so we can return the value of the Math.random() function.

Instructions
Change randomFraction to return a random number instead of returning 0.

randomFraction should return a random number.
The number returned by randomFraction should be a decimal.
You should be using Math.random to generate the random decimal number.

----------------------------------------

function randomFraction() {

  // Only change code below this line.

  return Math.random();

  // Only change code above this line.
}

----------------------------------------

function randomFraction() {

  // Only change code below this line.

  return Math.random();

  // Only change code above this line.
}

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

204 - Generate Random Whole Numbers with JavaScript

----------------------------------------

It's great that we can generate random decimal numbers, but it's even more useful if we use it to generate random whole numbers.

Use Math.random() to generate a random decimal.
Multiply that random decimal by 20.
Use another function, Math.floor() to round the number down to its nearest whole number.
Remember that Math.random() can never quite return a 1 and, because we're rounding down, it's impossible to actually get 20. This technique will give us a whole number between 0 and 19.

Putting everything together, this is what our code looks like:

Math.floor(Math.random() * 20);

We are calling Math.random(), multiplying the result by 20, then passing the value to Math.floor() function to round the value down to the nearest whole number.

Instructions
Use this technique to generate and return a random whole number between 0 and 9.

The result of randomWholeNum should be a whole number.
You should be using Math.random to generate a random number.
You should have multiplied the result of Math.random by 10 to make it a number that is between zero and nine.
You should use Math.floor to remove the decimal part of the number.

----------------------------------------

var randomNumberBetween0and19 = Math.floor(Math.random() * 20);

function randomWholeNum() {

  // Only change code below this line.

  return Math.floor(Math.random() * 10);
}

----------------------------------------

var randomNumberBetween0and19 = Math.floor(Math.random() * 20);

function randomWholeNum() {

  // Only change code below this line.

  return Math.floor(Math.random() * 10);
}

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

204 - Generate Random Whole Numbers within a Range

----------------------------------------

Instead of generating a random number between zero and a given number like we did before, we can generate a random number that falls within a range of two specific numbers.

To do this, we'll define a minimum number min and a maximum number max.

Here's the formula we'll use. Take a moment to read it and try to understand what this code is doing:

Math.floor(Math.random() * (max - min + 1)) + min

Instructions
Create a function called randomRange that takes a range myMin and myMax and returns a random number that's greater than or equal to myMin, and is less than or equal to myMax, inclusive.

The lowest random number that can be generated by randomRange should be equal to your minimum number, myMin.
The highest random number that can be generated by randomRange should be equal to your maximum number, myMax.
The random number generated by randomRange should be an integer, not a decimal.
randomRange should use both myMax and myMin, and return a random number in your range.

----------------------------------------

// Example
function ourRandomRange(ourMin, ourMax) {

  return Math.floor(Math.random() * (ourMax - ourMin + 1)) + ourMin;
}

ourRandomRange(1, 9);

// Only change code below this line.

function randomRange(myMin, myMax) {

  return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;

}

// Change these values to test your function
var myRandom = randomRange(5, 15);

----------------------------------------

// Example
function ourRandomRange(ourMin, ourMax) {

  return Math.floor(Math.random() * (ourMax - ourMin + 1)) + ourMin;
}

ourRandomRange(1, 9);

// Only change code below this line.

function randomRange(myMin, myMax) {

  return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;

}

// Change these values to test your function
var myRandom = randomRange(5, 15);

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

205 - Sift through Text with Regular Expressions

----------------------------------------

Regular expressions are used to find certain words or patterns inside of strings.

For example, if we wanted to find the word the in the string The dog chased the cat, we could use the following regular expression: /the/gi

Let's break this down a bit:

/ is the start of the regular expression.

the is the pattern we want to match.

/ is the end of the regular expression.

g means global, which causes the pattern to return all matches in the string, not just the first one.

i means that we want to ignore the case (uppercase or lowercase) when searching for the pattern.

Instructions
Select all the occurrences of the word and in testString.

You can do this by replacing the . part of the regular expression with the word and.

Your regular expression should find two occurrences of the word and.
Use regular expressions to find the word and in testString.

----------------------------------------

// Setup
var testString = "Ada Lovelace and Charles Babbage designed the first computer and the software that would have run on it.";

// Example
var expressionToGetSoftware = /software/gi;
var softwareCount = testString.match(expressionToGetSoftware).length;
  

// Only change code below this line.

var expression = /and/gi;  // Change this Line

// Only change code above this line

// This code counts the matches of expression in testString
var andCount = testString.match(expression).length;

----------------------------------------

// Setup
var testString = "Ada Lovelace and Charles Babbage designed the first computer and the software that would have run on it.";

// Example
var expressionToGetSoftware = /software/gi;
var softwareCount = testString.match(expressionToGetSoftware).length;
  

// Only change code below this line.

var expression = /and/gi;  // Change this Line

// Only change code above this line

// This code counts the matches of expression in testString
var andCount = testString.match(expression).length;

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

206 - Find Whitespace with Regular Expressions

----------------------------------------

We can also use regular expression selectors like \s to find whitespace in a string.

The whitespace characters are " " (space), \r (the carriage return), \n (newline), \t (tab), and \f (the form feed).

The whitespace regular expression looks like this:

/\s+/g

Instructions
Use \s to select all the whitespace characters in the sentence string.

Your regular expression should find seven spaces in testString.
Use the /\s+/g regular expression to find the spaces in testString.

----------------------------------------

// Setup
var testString = "How many spaces are there in this sentence?";

// Only change code below this line.

var expression = /\s+/g;  // Change this line

// Only change code above this line

// This code counts the matches of expression in testString
var spaceCount = testString.match(expression).length;

----------------------------------------

// Setup
var testString = "How many spaces are there in this sentence?";

// Only change code below this line.

var expression = /\s+/g;  // Change this line

// Only change code above this line

// This code counts the matches of expression in testString
var spaceCount = testString.match(expression).length;

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

207 - Invert Regular Expression Matches with JavaScript

----------------------------------------

You can invert any match by using the uppercase version of the regular expression selector.

For example, \s will match any whitespace, and \S will match anything that isn't whitespace.

Instructions
Use /\S/g to count the number of non-whitespace characters in testString.

Your regular expression should find forty nine non-space characters in the testString.
Use the /\S/g regular expression to find non-space characters in testString.

----------------------------------------

// Setup
var testString = "How many non-space characters are there in this sentence?";

// Only change code below this line.

var expression = /\S/g;  // Change this line

// Only change code above this line

// This code counts the matches of expression in testString
var nonSpaceCount = testString.match(expression).length;

----------------------------------------

// Setup
var testString = "How many non-space characters are there in this sentence?";

// Only change code below this line.

var expression = /\S/g;  // Change this line

// Only change code above this line

// This code counts the matches of expression in testString
var nonSpaceCount = testString.match(expression).length;

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

208 - Declare JavaScript Objects as Variables

----------------------------------------

Before we dive into Object Oriented Programming, let's revisit JavaScript objects.

Give your motorBike object a wheels, engines and seats attribute and set them to numbers.

motorBike should have a engines attribute set to a number.
motorBike should have a wheels attribute set to a number.
motorBike should have a seats attribute set to a number.

----------------------------------------

var car = {
  "wheels":4,
  "engines":1,
  "seats":5
};

var motorBike = {

  // Only change code below this line.
  
  "wheels":2,
  "engines":1,
  "seats":2

};

----------------------------------------

var car = {
  "wheels":4,
  "engines":1,
  "seats":5
};

var motorBike = {

  // Only change code below this line.
  
  "wheels":2,
  "engines":1,
  "seats":2

};

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

209 - Construct JavaScript Objects with Functions

----------------------------------------

We are also able to create objects using constructor functions.

A constructor function is given a capitalized name to make it clear that it is a constructor.

Here's an example of a constructor function:

var Car = function() {
  this.wheels = 4;
  this.engines = 1;
  this.seats = 5;
};
In a constructor the this variable refers to the new object being created by the constructor. So when we write,

  this.wheels = 4;

inside of the constructor we are giving the new object it creates a property called wheels with a value of 4.

You can think of a constructor as a description for the object it will create.

Have your MotorBike constructor describe an object with wheels, engines and seats properties and set them to numbers.

MotorBike should have a engines attribute set to a number.
MotorBike should have a wheels attribute set to a number.
MotorBike should have a seats attribute set to a number.

----------------------------------------

var Car = function() {
  this.wheels = 4;
  this.engines = 1;
  this.seats = 5;
};

// Only change code below this line.

var MotorBike = function() {
  
  this.wheels = 2;
  this.engines = 1;
  this.seats = 2;

};

----------------------------------------

var Car = function() {
  this.wheels = 4;
  this.engines = 1;
  this.seats = 5;
};

// Only change code below this line.

var MotorBike = function() {
  
  this.wheels = 2;
  this.engines = 1;
  this.seats = 2;

};

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

210 - Make Instances of Objects with a Constructor Function

----------------------------------------

Now let's put that great constructor function we made in the last lesson to use!

To use a constructor function we call it with the new keyword in front of it like:

var myCar = new Car();

myCar is now an instance of the Car constructor that looks like the object it described:

{
  wheels: 4,
  engines: 1,
  seats: 5
}
Note that it is important to use the new keyword when calling a constructor. This is how Javascript knows to create a new object and that all the references to this inside the constructor should be referring to this new object.

Now, once the myCar instance is created it can be used like any other object and can have its properties accessed and modified the same way you would usually. For example:

myCar.turboType = "twin";

Our myCar variable now has a property turboType with a value of "twin".

In the editor, use the Car constructor to create a new instance and assign it to myCar.

Then give myCar a nickname property with a string value.

The property wheels should still be 4 in the object constructor.
There should not be a property nickname in the object constructor.
The property wheels of myCar should equal 4.
The property nickname of myCar should be a string.

----------------------------------------

var Car = function() {
  this.wheels = 4;
  this.engines = 1;
  this.seats = 5;
};

// Only change code below this line.

  var myCar = {
    
  wheels: 4,
  engines: 1,
  seats: 5,
  nickname: "soma"

};

----------------------------------------

var Car = function() {
  this.wheels = 4;
  this.engines = 1;
  this.seats = 5;
};

// Only change code below this line.

  var myCar = {
    
  wheels: 4,
  engines: 1,
  seats: 5,
  nickname: "soma"

};

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

211 - Make Unique Objects by Passing Parameters to our Constructor

----------------------------------------

The constructor we have is great, but what if we don't always want to create the same object?

To solve this we can add parameters to our constructor. We do this like the following example:

var Car = function(wheels, seats, engines) {
  this.wheels = wheels;
  this.seats = seats;
  this.engines = engines;
};
Now we can pass in arguments when we call our constructor.

var myCar = new Car(6, 3, 1);

This code will create an object that uses the arguments we passed in and looks like:

{
  wheels: 6,
  seats: 3,
  engines: 1
}
Now give it a try yourself! Alter the Car constructor to use parameters to assign values to the wheels, seats, and engines properties.

Then call your new constructor with three number arguments and assign it to myCar to see it in action.

Calling new Car(3,1,2) should produce an object with a wheels property of 3, a seats property of 1, and an engines property of 2.
Calling new Car(4,4,2) should produce an object with a wheels property of 4, a seats property of 4, and an engines property of 2.
Calling new Car(2,6,3) should produce an object with a wheels property of 2, a seats property of 6, and an engines property of 3.
myCar should have number values for the wheels, seats, and engines properties.

----------------------------------------

var Car = function(wheels, seats, engines) {
//Change this constructor
this.wheels = wheels;
this.seats = seats;
this.engines = engines;
};

//Try it out here
var myCar = new Car (3, 1, 2);

----------------------------------------

var Car = function(wheels, seats, engines) {
//Change this constructor
this.wheels = wheels;
this.seats = seats;
this.engines = engines;
};

//Try it out here
var myCar = new Car (3, 1, 2);

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

212 - Make Object Properties Private

----------------------------------------

Objects have their own attributes, called properties, and their own functions, called methods.

In the previous challenges, we used the this keyword to reference public properties of the current object.

We can also create private properties and private methods, which aren't accessible from outside the object.

To do this, we create the variable inside the constructor using the var keyword we're familiar with, instead of creating it as a property of this.

This is useful for when we need to store information about an object but we want to control how it is used by outside code.

For example, what if we want to store the speed our car is traveling at but we only want outside code to be able to modify it by accelerating or decelerating, so the speed changes in a controlled way?

In the editor you can see an example of a Car constructor that implements this pattern.

Now try it yourself! Modify the Bike constructor to have a private property called gear and two public methods called getGear and setGear to get and set that value.

Further explanation on this keyword

The method getGear of myBike should be accessible outside the object.
The method setGear of myBike should be accessible outside the object.
myBike.gear should remain undefined.
myBike.getGear() should return 4 after calling myBike.setGear(4).
myBike.getGear() should return 3 after calling myBike.setGear(3).
myBike.getGear() should return 1 after calling myBike.setGear(1).

----------------------------------------

var Car = function() {
  // this is a private variable
  var speed = 10;

  // these are public methods
  this.accelerate = function(change) {
    speed += change;
  };

  this.decelerate = function() {
    speed -= 5;
  };

  this.getSpeed = function() {
    return speed;
  };
};

var Bike = function() {

  // Only change code below this line.
  
  var gear = 0;
  
  this.getGear = function () {
    return gear;
  };
  
  this.setGear = function (set) {
    gear = set;
  };

};

var myCar = new Car();

var myBike = new Bike();

----------------------------------------

var Car = function() {
  // this is a private variable
  var speed = 10;

  // these are public methods
  this.accelerate = function(change) {
    speed += change;
  };

  this.decelerate = function() {
    speed -= 5;
  };

  this.getSpeed = function() {
    return speed;
  };
};

var Bike = function() {

  // Only change code below this line.
  
  var gear = 0;
  
  this.getGear = function () {
    return gear;
  };
  
  this.setGear = function (set) {
    gear = set;
  };

};

var myCar = new Car();

var myBike = new Bike();

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

213 - Iterate over Arrays with map

----------------------------------------

The map method is a convenient way to iterate through arrays. Here's an example usage:

var oldArray = [1, 2, 3];
var timesFour = oldArray.map(function(val){
  return val * 4;
});
console.log(timesFour); // returns [4, 8, 12]
console.log(oldArray);  // returns [1, 2, 3]
The map method will iterate through every element of the array, creating a new array with values that have been modified by the callback function, and return it. Note that it does not modify the original array.

In our example the callback only uses the value of the array element (the val argument) but your callback can also include arguments for the index and array being acted on.

Use the map function to add 3 to every value in the variable oldArray, and save the results into variable newArray. oldArray should not change.

You should not change the original array.
You should add three to each value in the array.
You should be making use of the map method.
You should only modify the array with map.

----------------------------------------

var oldArray = [1,2,3,4,5];

// Only change code below this line.

var newArray = oldArray.map(function(val) {
    return val + 3;
});

----------------------------------------

var oldArray = [1,2,3,4,5];

// Only change code below this line.

var newArray = oldArray.map(function(val) {
    return val + 3;
});

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

214 - Condense arrays with reduce

----------------------------------------

The array method reduce is used to iterate through an array and condense it into one value.

To use reduce you pass in a callback whose arguments are an accumulator (in this case, previousVal) and the current value (currentVal).

The accumulator is like a total that reduce keeps track of after each operation. The current value is just the next element in the array you're iterating through.

reduce has an optional second argument which can be used to set the initial value of the accumulator. If no initial value is specified it will be the first array element and currentVal will start with the second array element.

Here is an example of reduce being used to subtract all the values of an array:

var singleVal = array.reduce(function(previousVal, currentVal) {
  return previousVal - currentVal;
}, 0);
Use the reduce method to sum all the values in array and assign it to singleVal.

singleVal should be equal to the sum of all items in the array variable.
You should have made use of the reduce method.

----------------------------------------

var array = [4,5,6,7,8];
var singleVal = 0;

// Only change code below this line.

// singleVal = array;

var singleVal = array.reduce(function(previousVal, currentVal) {
  return previousVal + currentVal;
}, 0);

----------------------------------------

var array = [4,5,6,7,8];
var singleVal = 0;

// Only change code below this line.

// singleVal = array;

var singleVal = array.reduce(function(previousVal, currentVal) {
  return previousVal + currentVal;
}, 0);

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

215 - Filter Arrays with filter

----------------------------------------

The filter method is used to iterate through an array and filter out elements where a given condition is not true.

filter is passed a callback function which takes the current value (we've called that val) as an argument.

Any array element for which the callback returns true will be kept and elements that return false will be filtered out.

The following code is an example of using filter to remove array elements that are equal to five:

Note: We omit the second and third arguments since we only need the value

array = array.filter(function(val) {
  return val !== 5;
});
Use filter to create a new array with all the values from oldArray which are less than 6. The oldArray should not change.

You should not change the original array.
You should have filtered out all values from the array that are greater than 5.
You should be using the filter method to create a new array.
You should only be using filter to make the new array.

----------------------------------------

var oldArray = [1,2,3,4,5,6,7,8,9,10];

// Only change code below this line.

var newArray = oldArray;

newArray = newArray.filter(function(val) {
  return val < 6;
});

----------------------------------------

var oldArray = [1,2,3,4,5,6,7,8,9,10];

// Only change code below this line.

var newArray = oldArray;

newArray = newArray.filter(function(val) {
  return val < 6;
});

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

216 - Sort Arrays with sort

----------------------------------------

You can use the method sort to easily sort the values in an array alphabetically or numerically.

Unlike the previous array methods we have been looking at, sort actually alters the array in place. However, it also returns this sorted array.

sort can be passed a compare function as a callback. The compare function should return a negative number if a should be before b, a positive number if a should be after b, or 0 if they are equal.

If no compare (callback) function is passed in, it will convert the values to strings and sort alphabetically.

Here is an example of using sort with a compare function that will sort the elements from smallest to largest number:

var array = [1, 12, 21, 2];
array.sort(function(a, b) {
  return a - b;
});
Use sort to sort array from largest to smallest.

Further explanation on the .sort() method can be found here.

You should have sorted the array from largest to smallest.
You should only be using sort to modify the array.
You should have made use of the sort method.

----------------------------------------

var array = [1, 12, 21, 2];

// Only change code below this line.

array.sort(function(a, b) {
  return b - a;
});

----------------------------------------

var array = [1, 12, 21, 2];

// Only change code below this line.

array.sort(function(a, b) {
  return b - a;
});

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

217 - Reverse Arrays with reverse

----------------------------------------

You can use the reverse method to reverse the elements of an array.

reverse is another array method that alters the array in place, but it also returns the reversed array.

var myArray = [1, 2, 3];
myArray.reverse();
returns [3, 2, 1]

Use reverse to reverse the array variable and assign it to newArray.

You should reverse the array.
You should use the reverse method.
You should only be using reverse to modify array.

----------------------------------------

var array = [1,2,3,4,5,6,7];
var newArray = [];

// Only change code below this line.

newArray = array;

newArray.reverse();

----------------------------------------

var array = [1,2,3,4,5,6,7];
var newArray = [];

// Only change code below this line.

newArray = array;

newArray.reverse();

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

218 - Concatenate Arrays with concat

----------------------------------------

concat can be used to merge the contents of two arrays into one.

concat takes an array as an argument and returns a new array with the elements of this array concatenated onto the end.

Here is an example of concat being used to concatenate otherArray onto the end of oldArray:

newArray = oldArray.concat(otherArray);

Use .concat() to concatenate concatMe onto the end of oldArray and assign it to newArray.

You should concatenate the two arrays together.
You should be using the concat method to merge the two arrays.
You should only be using concat to modify the arrays.

----------------------------------------

var oldArray = [1,2,3];
var newArray = [];

var concatMe = [4,5,6];

// Only change code below this line.

newArray = oldArray.concat(concatMe);

----------------------------------------

var oldArray = [1,2,3];
var newArray = [];

var concatMe = [4,5,6];

// Only change code below this line.

newArray = oldArray.concat(concatMe);

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

219 - Split Strings with split

----------------------------------------

You can use the split method to split a string into an array.

split uses the argument you pass in as a delimiter to determine which points the string should be split at.

Here is an example of split being used to split a string at every s character:

var array = string.split('s');

Use split to create an array of words from string and assign it to array.

You should use the split method on the string.
You should split the string by its spaces.

----------------------------------------

var string = "Split me into an array";
var array = [];

// Only change code below this line.

var array = string.split(' ');

----------------------------------------

var string = "Split me into an array";
var array = [];

// Only change code below this line.

var array = string.split(' ');

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

220 - Join Strings with join

----------------------------------------

We can use the join method to join each element of an array into a string separated by whatever delimiter you provide as an argument.

The following is an example of using join to join all of the elements of an array into a string with all the elements separated by word and:

var veggies = ["Celery", "Radish", "Carrot", "Potato"];
var salad = veggies.join(" and ");
console.log(salad); // "Celery and Radish and Carrot and Potato" 
Use the join method to create a string from joinMe with spaces in between each element and assign it to joinedString.

You should join the elements of the array with spaces.
You should use of the join method on the array.

----------------------------------------

var joinMe = ["Split","me","into","an","array"];
var joinedString = '';

// Only change code below this line.

joinedString = joinMe.join(' ');

----------------------------------------

var joinMe = ["Split","me","into","an","array"];
var joinedString = '';

// Only change code below this line.

joinedString = joinMe.join(' ');

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

221 - Reverse a String

----------------------------------------

Reverse the provided string.

You may need to turn the string into an array before you can reverse it.

Your result must be a string.

Remember to use Read-Search-Ask if you get stuck. Write your own code.

Here are some helpful links:

Global String Object
String.prototype.split()
Array.prototype.reverse()
Array.prototype.join()

reverseString("hello") should return a string.
reverseString("hello") should become "olleh".
reverseString("Howdy") should become "ydwoH".
reverseString("Greetings from Earth") should return "htraE morf sgniteerG".

----------------------------------------

function reverseString(str) {
  return str.split('').reverse().join('');
}

reverseString("hello");

----------------------------------------

function reverseString(str) {
  return str.split('').reverse().join('');
}

reverseString("hello");

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

222 - Factorialize a Number

----------------------------------------

Return the factorial of the provided integer.

If the integer is represented with the letter n, a factorial is the product of all positive integers less than or equal to n.

Factorials are often represented with the shorthand notation n!

For example: 5! = 1 * 2 * 3 * 4 * 5 = 120

Remember to use Read-Search-Ask if you get stuck. Write your own code.

Here are some helpful links:

Arithmetic Operators

factorialize(5) should return a number.
factorialize(5) should return 120.
factorialize(10) should return 3628800.
factorialize(20) should return 2432902008176640000.
factorialize(0) should return 1.

----------------------------------------

function factorialize(num) {
  if (num === 0) { return 1; }
  return num * factorialize(num-1);
}

factorialize(5);

----------------------------------------

function factorialize(num) {
  if (num === 0) { return 1; }
  return num * factorialize(num-1);
}

factorialize(5);

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

223 - Check for Palindromes

----------------------------------------

Return true if the given string is a palindrome. Otherwise, return false.

A palindrome is a word or sentence that's spelled the same way both forward and backward, ignoring punctuation, case, and spacing.

Note
You'll need to remove all non-alphanumeric characters (punctuation, spaces and symbols) and turn everything lower case in order to check for palindromes.

We'll pass strings with varying formats, such as "racecar", "RaceCar", and "race CAR" among others.

We'll also pass strings with special symbols, such as "2A3*3a2", "2A3 3a2", and "2_A3*3#A2".

Remember to use Read-Search-Ask if you get stuck. Write your own code.

Here are some helpful links:

String.prototype.replace()
String.prototype.toLowerCase()

palindrome("eye") should return a boolean.
palindrome("eye") should return true.
palindrome("_eye") should return true.
palindrome("race car") should return true.
palindrome("not a palindrome") should return false.
palindrome("A man, a plan, a canal. Panama") should return true.
palindrome("never odd or even") should return true.
palindrome("nope") should return false.
palindrome("almostomla") should return false.
palindrome("My age is 0, 0 si ega ym.") should return true.
palindrome("1 eye for of 1 eye.") should return false.
palindrome("0_0 (: /-\ :) 0-0") should return true.
palindrome("five|\_/|four") should return false.

----------------------------------------

function palindrome(str) {
  return str.replace(/[\W_]/g, '').toLowerCase() ===
         str.replace(/[\W_]/g, '').toLowerCase().split('').reverse().join('');
}

palindrome("eye");

----------------------------------------

function palindrome(str) {
  return str.replace(/[\W_]/g, '').toLowerCase() ===
         str.replace(/[\W_]/g, '').toLowerCase().split('').reverse().join('');
}

palindrome("eye");

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

----------------------------------------

----------------------------------------

----------------------------------------

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

----------------------------------------

----------------------------------------

----------------------------------------

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

----------------------------------------

----------------------------------------

----------------------------------------

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

----------------------------------------

----------------------------------------

----------------------------------------

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

----------------------------------------

----------------------------------------

----------------------------------------

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------------

----------------------------------------

----------------------------------------

----------------------------------------

----------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@








