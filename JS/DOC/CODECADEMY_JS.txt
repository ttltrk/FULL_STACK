
*************************************************************************************************************
CODECADEMY.COM
Introduction To JavaScript
*************************************************************************************************************

=============================================================================================================

01. INTRODUCTION TO JAVASCRIPT

       01.001. Introduction
       01.002. Console
       01.003. Data Types
       01.004. Math Operators
       01.005. Properties
       01.006. Built-in Methods
       01.007. Libraries
       01.008. Comments
       01.009. Review Types and Operators

02. VARIABLES

       02.001. Variables
       02.002. Create a Variable: const
       02.003. Create a Variable: let
       02.004. Undefined
       02.005. Mathematical Assignment Operator
       02.006. String Interpolation
       02.007. String Interpolation II
       02.008. Revie Variables

03. CONTROL FLOW

       03.001. Introduction to Control Flow
       03.002. if/else Statements
       03.003. True and Flase Values
       03.004. True and Flase Values II
       03.005. Comparison Operators
       03.006. Comparison Operators II
       03.007. else if Statements
       03.008. Logical Operators
       03.009. switch Statements
       03.010. Ternary Operator
       03.011. Review: Control Flow

=============================================================================================================

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
01. INTRODUCTION TO JAVASCRIPT 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
01.001. Introduction
=============================================================================================================

JavaScript is a widely used web-based programming language that powers the dynamic behavior on most websites, 
including this one.

In this lesson, you will learn about data types and built-in methods, essential knowledge for all aspiring 
JavaScript developers. When you finish, you'll know how to write programs that solve mathematical expressions, 
compute the length of a word, and generate random numbers.

This lesson covers the building blocks of JavaScript. Make sure to take notes and pace yourself. 
This foundation will set you up for understanding more complex concepts later.

=============================================================================================================
01.002. Console
=============================================================================================================

Before you learn about data types and methods, you need to know how to print values to the console. 
The console is a tool that developers use to record the output of their JavaScript programs.

The console.log() command is used to print, or log, text to the console. Consider the following example:

console.log("Hello!");

In this example, Hello! is logged to the console. Notice, we denote the end of the line with a semicolon. 
Although your code will usually run as intended without a semicolon, it is best practice to always 
include one to ensure your code works as expected in situations when it does need one.

You'll see in the next exercise that you can put any data type inside the parentheses to print it to the console.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/* 
Use console.log to log your favorite pizza topping to the console. Write your topping between the quotation marks ('').
*/

console.log('tejfolos naker');

>>>
tejfolos naker
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
On the next line log your favorite book or movie to the console.
*/

console.log('hagakure');

>>>
hagakure
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
01.003. Data Types
=============================================================================================================

Data types are the building blocks of all languages and essential pieces of any program.

Below are examples of four primitive data types that lay the foundation for all JavaScript programs. 
Primitive data types, as their name implies, are the simplest built-in forms of data.

console.log('New York City');
console.log(40.7);
console.log(true);
console.log(null);

In the example above, the computer logs each of the four primitive data types to the console. The types include:

Strings — Any grouping of keyboard characters (letters, spaces, numbers, or symbols) 
surrounded by single quotes ('Hello') or double quotes ("World!"). In the example above, 'New York City' is a string.
Numbers — Any number, including numbers with decimals: 4, 1516, .002, 23.42. In the example above, 40.7 is a number.
Booleans — Either true or false, with no quotations. In the example above, true is a boolean.
Null — Can only be null. It represents the absence of value.
Let's review: a string is any grouping of words, a number's a number, null is the absence of value, 
and a boolean is a ghostly Halloween costume. Or no, that's false! It's either true or false.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
On line 1, log the string 'JavaScript' to the console.
*/

console.log('JavaScript');

>>>
JavaScript
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
On line 2, log the number 33.7 to the console.
*/

console.log(33.7);

>>>
33.7
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
On line 3, log true to the console.
*/

console.log(true);

>>>
true
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
On line 4, print null to the console.
*/

console.log(null);

>>>
null
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
01.004. Math Operators
=============================================================================================================

Don't worry! Math doesn't need to be your strong-suit to learn JavaScript. 
However, there are operators you'll need to know to make useful programs.

JavaScript supports the following math operators:

Add: +
Subtract: -
Multiply: *
Divide: /

These all work how you might guess:

console.log(3 + 4); // Equals 7
console.log(5 - 1); // Equals 4
console.log(4 * 2); // Equals 8
console.log(9 / 3); // Equals 3

In the example above, each line uses a different mathematical operator to log a value to the console.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Inside of a console.log(), add 3.5 to your age.
This is the age you'll be when we start sending people to live on Mars.
*/

console.log(34 + 3.5);

>>>
37.5
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
On a new line write another console.log(). Inside the new console.log()'s parentheses, take the current year and subtract 1969.
The answer is how many years it's been since the 1969 moon landing.
*/

console.log(2017 - 1969);

>>>
48
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Create another console.log(). Inside the parentheses divide 65 by 240.
*/

console.log(65 / 240);

>>>
0.2708333333333333
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Create one last console.log. Inside the parentheses, multiply 0.2708 by 100.
That's the percent of the sun that is made up of helium. Assuming we could stand on the sun, we'd all sound like chipmunks!
*/

console.log(0.2708 * 100)

>>>
27.08
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
01.005. Properties
=============================================================================================================

When you introduce a new piece of data into a JavaScript program, the browser saves it as an instance of the data type. 
An instance is an individual case (or object) of a data type.

JavaScript will save a new piece of data, like 'Hello', as a string instance in the computer's memory. Another example, 
the number 40.7, is stored as an instance of the number data type.

An instance, like the string 'Hello', has additional information attached to it.

For example, every string instance has a property called length that stores the number of characters in it. 
You can retrieve property information by appending the string with a period and the property name:

console.log('Hello'.length);
In the example above, the value saved to the length property is retrieved from the string, 'Hello'. 
The program prints 5 to the console, because Hello has five characters in it.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Use the .length property to log the number of characters in the following string to the console:
Teaching the world how to code
*/

console.log('Teaching the world how to code'.length);

>>>
30
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
01.006. Built-in Methods
=============================================================================================================

While the length of a string is calculated when an instance is created, a string instance also has methods 
that calculate new information as needed. When these built-in methods are called on an instance, 
they perform actions that generate an output.

Built-in methods are called, or used, by appending an instance with a period, the name of the method, and opening 
(() and closing ()) parentheses. Consider the examples below:

console.log('Hello'.toUpperCase()); // 'HELLO'
console.log('Hey'.startsWith('H')); // true

Let's look at each line separately:

On the first line, the .toUpperCase() method is called on the string instance 'Hello'. The result is logged to the console.
This method returns a string in all capital letters: 'HELLO'.
On the second line, the .startsWith() method is called on the string instance "Hey". 
This method also accepts the character 'H' as an input between the opening and closing parentheses. 
Since the string 'Hey' does start with the letter 'H', the method returns the boolean true.
You can find a list of built-in string methods in the JavaScript documentation. 
Developers use documentation as a reference tool. It describes JavaScript's keywords, methods, and syntax.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Use the .toUpperCase() method to log the string Codecademy to the console in all capital letters.
Log Codecademy in all uppercase letters
*/

console.log('Codecademy'.toUpperCase()); 

>>>
CODECADEMY
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Use the JavaScript documentation to find a string method that trims the whitespace at the beginning and end of a string.
Use the method to remove the whitespace at the beginning and end of the following statement (also in app.js):
'    Remove whitespace   '
Use a string method to log the following statment without whitespace at the beginning and end of it.
*/

console.log('    Remove whitespace   '.trim()); 

>>>
Remove whitespace
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
01.007. Libraries
=============================================================================================================

Instance methods, by definition, require that you create an instance before you can use them.
What if you want to call a method without an instance? That's where JavaScript libraries come in. 
Libraries contain methods that you can call without creating an instance.

One such collection contains mathematical methods, aptly named the Math library.

Let's see how you call the .random() method from the Math library:

console.log(Math.random()); // random number between 0 and 1
In the example above, we called the .random() method by appending the library name with a period, 
the name of the method, and opening (() and closing ()) parentheses. This method returns a random number between 0 and 1. 
This code prints a random number between 0 and 1.

To generate a random number between 0 and 50, we could multiply this result by 50, like so:

Math.random() * 50;

The answer in the example above will most likely be a decimal. To ensure the answer is a whole number, 
JavaScript provides a built-in method called Math.floor(). Math.floor() takes a decimal number, 
and rounds down to the nearest whole number. You can use Math.floor() to round a random number like this:

Math.floor(Math.random() * 50);
In this case:

Math.random generates a random number between 0 and 1.
We then multiply that number by 50, so now we have a number between 0 and 50.
Then, Math.floor rounds the number down to the nearest whole number.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Inside of a console.log, create a random number with Math.random, then multiply it by 100.
*/

console.log(Math.random() * 100);

>>>
96.1200301889846
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Now, utilize Math.floor to make the output a whole number.
Inside the console.log you wrote in the last step, put Math.random() * 100 inside the parentheses of Math.floor.
*/

console.log(Math.floor(Math.random() * 100));

>>>
43
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Find a method in the JavaScript math library that returns the smallest integer greater than or equal to a decimal number.
Use this method with the number 43.8. Log the answer to the console.
*/

console.log(Math.ceil(43.8));

>>>
44
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Use the JavaScript documentation to find a method in the Number library that checks if a number is an integer.
Put the number 2017 in the parentheses and use console.log() to print the result.
*/

console.log(Number.isInteger(2017));

>>>
True
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
01.008. Comments
=============================================================================================================

As we write JavaScript, we can create comments in our code.

Programs do not evaluate comments when you run them. In other words, they exist just for human readers. 
Good comments are useful for you and other developers, because they describe what the code does.

There are two types of code comments in JavaScript:

A single line comment will comment out a single line and is denoted with two forward slashes 
// preceding a line of JavaScript code.

// The first 5 decimals of pi
console.log('Pi is equal to ' + 3.14159);
A multi-line comment will comment out multiple lines and is denoted with /* to begin the comment, 
and */ to end the comment.

/*
console.log('All of this code');
console.log('Is commented out');
console.log('And will not be executed);
*/

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Let's practice adding some code comments.
To the right, we've provided you with the beginning of the book Catch-22 by Joseph Heller.
On line 1, write a single line comment that says Opening line.
*/ 

//Opening line
console.log('It was love at first sight.');

console.log('The first time Yossarian saw the chaplain he fell madly in love with him.');
console.log('Yossarian was in the hospital with a pain in his liver that fell just short of being jaundice.');
console.log('The doctors were puzzled by the fact that it wasn\'t quite jaundice.');
console.log('If it became jaundice they could treat it.');
console.log('If it didn\'t become jaundice and went away they could discharge him.');
console.log('But this just being short of jaundice all the time confused them.');

>>>
It was love at first sight.
The first time Yossarian saw the chaplain he fell madly in love with him.
Yossarian was in the hospital with a pain in his liver that fell just short of being jaundice.
The doctors were puzzled by the fact that it wasn't quite jaundice.
If it became jaundice they could treat it.
If it didn't become jaundice and went away they could discharge him.
But this just being short of jaundice all the time confused them.
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Single line comments are great for adding context to your code. Multi-line comments are often best suited to prevent a block of code from running. However, both types of comments can be used for either purpose.
Comment out lines 4 - 9 with a multi-line comment.
*/

//Opening line
console.log('It was love at first sight.');
/*
console.log('The first time Yossarian saw the chaplain he fell madly in love with him.');
console.log('Yossarian was in the hospital with a pain in his liver that fell just short of being jaundice.');
console.log('The doctors were puzzled by the fact that it wasn\'t quite jaundice.');
console.log('If it became jaundice they could treat it.');
console.log('If it didn\'t become jaundice and went away they could discharge him.');
console.log('But this just being short of jaundice all the time confused them.');
*/
----------------------------

>>>
It was love at first sight.
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
01.009. Review Types and Operators
=============================================================================================================

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Let's take one more glance at the concepts we just learned:

Four essential data types in JavaScript include strings, numbers, booleans, and null.
Data is printed, or logged, to the console with console.log().
Four built-in mathematical operators include +, -, *, and /.
JavaScript associates certain properties with different data types.
JavaScript has built-in methods for different data types.
Libraries are collections of methods that can be called without an instance.
You can write single-line comments with // and multi-line comments between /* and */.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
02. VARIABLES
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
02.001. Variables
=============================================================================================================

Programmers use variables to write code that is easy to understand and repurpose.

Imagine you're writing a weather app. Your thermometer outside reports the temperature in Celsius, 
but your goal is to record the temperature in Fahrenheit.

You write a program that takes a temperature of 15 degrees Celsius and calculates the temperature in Fahrenheit.

Once you've done this though, you see the temperature now reads 16 degrees Celsius. To find Fahrenheit again, 
you'd need to write a whole new program to convert 16 degrees Celsius to Fahrenheit.

That's where variables come in. Variables allow us to assign data to a word and use the word to reference the data. 
If the data changes (like degrees Celsius) we can replace the variable's value instead of re-writing the program.

In this lesson you will learn about two ways to declare variables: let and const.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Run your code.
Was anything printed to the console?
*/

// This line of code sets the variable location to the string New York City
const location = 'New York City';

// This line of code sets the variable latitude to the number 40.7
let latitude = 40.7;

// This line of code sets the variable inNorthernHemisphere to true
let inNorthernHemisphere = true;

>>>

>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Add the following lines of code to the bottom of app.js:
console.log(location);
console.log(latitude);
console.log(inNorthernHemisphere);
Run your code and take a look at the console.
Are the results what you expected?
*/

// This line of code sets the variable location to the string New York City
const location = 'New York City';

// This line of code sets the variable latitude to the number 40.7
let latitude = 40.7;

// This line of code sets the variable inNorthernHemisphere to true
let inNorthernHemisphere = true;

console.log(location);
console.log(latitude);
console.log(inNorthernHemisphere);

>>>
New York City
40.7
true
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
02.002. Create a Variable: const
=============================================================================================================

Let's dive in and see a variable in the wild. Here is how you declare a constant variable:

const myName = 'Arya';
console.log(myName);
// Output: Arya

Let's consider the example above:

const, short for constant, is a JavaScript keyword that creates a new variable with a value that cannot change.
myName is the variable's name. Notice that the word has no spaces, and we capitalized the N. 
Capitalizing in this way is a standard convention in JavaScript called camelCasing, because the capital letters 
look like the humps on a camel's back.

= is the assignment operator. It assigns the value ('Arya') to the variable (myName).
'Arya' is the value assigned (=) to the variable myName.
After the variable is declared, we can print 'Arya' to the console with: console.log(myName).

You can save any data type in a variable. For example, here we save numbers:

const myAge = 11;
console.log(myAge);
// Output: 11

In the example above, on line 1 the myAge variable is set to 11. Below that, console.log() is used to print 11 to the console.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Create a constant variable named entree and set it to equal to the string 'Enchiladas'.
*/

const entree = 'Enchiladas';const price = 12;

>>>

>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Now, under the entree variable, create a constant variable named price that saves the number 12.
*/

const price = 12;

>>>

>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Under the price variable, use console.log() to print the value saved to entree.
On the following line, use console.log() to print the value saved to price.
*/

console.log(entree);
console.log(price);

>>>

>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Copy and paste the following code to the bottom of your program.
entree = 'Tacos';
This code throws the following error when you run your code:
TypeError: Assignment to constant variable.
We'll discuss what's going on here in the next exercise.
*/

entree = 'Tacos';

>>>
/home/ccuser/workspace/learn-javascript-variables-const/app.js:3
entree = 'Tacos';
       ^

TypeError: Assignment to constant variable.
    at Object.<anonymous> (/home/ccuser/workspace/learn-javascript-variables-const/app.js:3:8)
    at Module._compile (module.js:571:32)
    at Object.Module._extensions..js (module.js:580:10)
    at Module.load (module.js:488:32)
    at tryModuleLoad (module.js:447:12)
    at Function.Module._load (module.js:439:3)
    at Module.runMain (module.js:605:10)
    at run (bootstrap_node.js:427:7)
    at startup (bootstrap_node.js:151:9)
    at bootstrap_node.js:542:3
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
02.003. Create a Variable: let
=============================================================================================================

In the final task of the previous exercise you received the following error:

TypeError: Assignment to constant variable.
JavaScript threw an error because you assigned a new value to a constant variable. Constant variables, as their name implies, 
are constant — you cannot assign them a different value.

Let variables however, can be reassigned.

let meal = 'Enchiladas';
console.log(meal);
meal = 'Tacos';
console.log(meal);
// output: Enchiladas
// output: Tacos

In the example above, the let keyword is used to create the meal variable with the string 'Enchiladas' saved to it. 
On line three, the meal variable is changed to store the string 'Tacos'.

You may be wondering, when to use const vs let. In general, only use const if the value saved to a variable 
does not change in your program.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Create a let variable called changeMe and set it equal to the Boolean true.
*/

let changeMe = true;

>>>

>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Set the changeMe variable to the boolean false.
Log the value saved to changeMe to the console.
*/

let changeMe = true;
changeMe = false;

console.log(changeMe);

>>>
false
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
02.004. Undefined
=============================================================================================================

What happens if you create a variable, but don't assign it a value?

JavaScript creates space for this variable in memory and sets it to undefined. 
Undefined is the fifth and final primitive data type. JavaScript assigns the undefined data type to 
variables that are not assigned a value.

let whatAmI;

In the example above, we created the variable whatAmI without any value assigned to it. 
JavaScript creates the variable and sets it equal to the value undefined.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Create a variable named notDefined, but don't set it equal to anything.
Log the result to the console.
*/

let notDefined;

>>>

>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Create an undefined variable named valueless.
Log the result to the console.
*/

let valueless;

console.log(valueless);

>>>
undefined
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
02.005. Mathematical Assignment Operators
=============================================================================================================

In this exercise, let's consider how we can use variables and math operators to calculate new values 
and assign them to a variable. Check out the example below:

let x = 4;
x = x + 1;

In the example above, we created the variable x with the number 4 assigned to it. 
On the following line, x = x + 1 increases the value of x from 4 to 5.

Notice, on line two in the example above, to increment x by one we had to write the x variable on the left 
and right side of the assignment operator (=). Using a variable twice in one expression is redundant and confusing.

To address this, JavaScript has a collection of built-in mathematical assignment operators 
that make it easy to calculate a new value and assign it to the same variable without writing the variable twice. 
See examples of these operators below.

let x = 4;
x += 2; // x equals 6

let y = 4;
y -= 2; // y equals 2

let z = 4;
z *= 2; // z equals 8

let r = 4;
r++; // r equals 5

let t = 4;
t--; // t equals 3

In the example above, operators are used to calculate a new value and assign it to the same variable. 
Let's consider the first three and last two operators separately:

The first three operators (+=, -=, and *=) perform the mathematical operation of the first operator 
(+, -, or *) using the number on the right, then assign the new value to the variable.
The last two operators are the increment (++) and decrement (--) operators. 
These operators are responsible for increasing and decreasing a number variable by one, respectively.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Use a mathematical assignment operator to add 16 to the value saved to molecule.
*/

let molecule = 16;

// Add and assign to molecule below
molecule += 16;

>>>

>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Use a mathematical assignment operator to assign particle the value of itself multiplied by 6.02.
*/

let particle = 18;

// Multiply and assign to particle below
particle *= 6.02;

>>>

>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Use the increment operator to increase the value saved to assay by 1.
*/

let assay = 3;

// Increment assay by 1
assay++;

>>>

>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
02.006. String Interpolation
=============================================================================================================

In previous exercises, we assigned strings to variables. Here, you will learn how to insert the content 
saved to a variable into a string.

The JavaScript term for inserting the data saved to a variable into a string is string interpolation.

The + operator, known until now as the addition operator, is used to interpolate (insert) 
a string variable into a string, as follows:

let myPet = 'armadillo';
console.log('I own a pet ' + myPet + '.'); 
// Output: 'I own a pet armadillo.'

In the example above, we saved the value 'armadillo' to the myPet variable. On the second line, 
the + operator is used to combine three strings: I own a pet, the value saved to myPet, and .. 
We log the result of this interpolation to the console as:

I own a pet armadillo.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Create a variable named favoriteAnimal and set it equal to your favorite animal.
*/

let favoriteAnimal = 'Jojo';

>>>

>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Use console.log to print: 'My favorite animal: Koala', but replace 'Koala' with your favoriteAnimal variable.
*/

console.log('My favorite animal: ' + favoriteAnimal + '.');

>>>
My favorite animal: Jojo.
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
02.007. String Interpolation II
=============================================================================================================

In the newest version of JavaScript (ES6) we can insert variables into strings with ease, by doing two things:

Instead of using quotes around the string, use backticks (this key is usually located on the top of your keyboard, 
left of the 1 key).
Wrap your variable with ${myVariable}, followed by a sentence. No +s necessary.
ES6 string interpolation is easier than the method you used last exercise. With ES6 interpolation 
we can insert variables directly into our text.

It looks like this:

let myPet = 'armadillo'
console.log(`I own a pet ${myPet}.`)
// Output: 'I own a pet armadillo.'

In the example above, the backticks (`) wrap the entire string. The variable (myPet) is inserted using ${}.
The resulting string is:

I own a pet armadillo.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Create a variable called myName and assign it your name.
*/

let myName = 'trk';

>>>

>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Create a variable called myCity, and assign it your favorite city's name.
*/

let myCity = 'xxx';

>>>

>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Use ${} to interpolate your variables into the sentence below. Use console.log() to print your sentence to the console.

My name is NAME. My favorite city is CITY.
Replace NAME and CITY in the values above with the values saved to myName and myCity.
*/

console.log(`My name is ${myName}. My favorite city is ${myCity}.`);

>>>
My name is trk. My favorite city is xxx.
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
02.008. Review Variables
=============================================================================================================

Let's review what we learned:

Variables hold reusable data in a program.
JavaScript will throw an error if you try to reassign const variables.
You can reassign variables that you create with the let keyword.
Unset variables store the primitive data type undefined.
Mathematical assignment operators make it easy to calculate a new value and assign it to the same variable.
The + operator is used to interpolate (combine) multiple strings.
In JavaScript ES6, backticks (`) and ${} are used to interpolate values into a string.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
03. CONTROL FLOW
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Learn how to make decisions with JavaScript.

=============================================================================================================
03.001. Introduction to Control Flow
=============================================================================================================

In this lesson, we'll explore how we can use the building blocks of JavaScript to write programs that make decisions.

Control flow statements enable JavaScript programs to make decisions by executing code based on a condition. 
If a given condition is true, we execute one block of code. If the statement is false, we execute another block of code. 
For instance, if we were making a game in which the user had to choose which door to enter, 
we'd need a way for the program to know what to do once the user was in the next room.

In this lesson, we'll learn how to make decisions with JavaScript and how it can control the program's flow.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
If you wish, set userName equal to your name.
Also, you can change the value of knowsJavaScript to true, if you'd like!
Try to predict what will be logged to the console. Run the code when you're ready!
*/

let userName = 'trk';
let knowsJavaScript = true;

if (knowsJavaScript && userName) {
  console.log('Great, ' + userName + '! Get ready to practice your JavaScript!');
} else if (knowsJavaScript) {
  console.log('Great! Get ready to practice your JavaScript!');
} else if (userName) {
  console.log('Great, ' + userName + '! Get ready to learn something new!');
} else {
  console.log('Great! Get ready to learn something new!');
}

>>>
Great, trk! Get ready to practice your JavaScript!
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
03.002. if/else Statements
=============================================================================================================

The core task of programming is writing lists of instructions for computers, or translating our 
ideas from human-speak to computer-speak.

Let's learn how we can ask JavaScript to think like us and make decisions the way we do.

We'll start with human-speak. Many decisions we make everyday boil down to this sentence in some form:

"If something is true, let's do option 1, or else, if it is false, let's do option 2."

This sentence looks fairly similar when we write it with JavaScript. See for yourself:

let needsCoffee = true;
if (needsCoffee === true) {
    console.log('Finding coffee');
} else {
    console.log('Keep on keeping on!');
}

Lines of code between curly braces are called blocks. if/else statements have two code blocks. 
If the variable needsCoffee is true, the program will run the first block of code. Otherwise, it will run the other block of code.
needsCoffee is the condition we are checking inside the if's parentheses. Since it is equal to true, 
our program will run the code between the first opening curly brace { (line 2) and the first closing curly brace } 
(line 4). It will ignore the else { ... } part. In this case, we'd see Finding coffee log to the console.
If needsCoffee were false, only the console.log() statement in the else block would be executed.
if/else statements are how programs can process yes/no questions programmatically.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Create a variable named isSoccerFan and set it equal to a boolean, based on your preference.
*/

let isSoccerFan = false;

>>>

>>>

---------------------------------------------------------------------

/*
Write an if/else statement that uses isSoccerFan as its condition. If it is true, then log, Goal!. 
If it is false, then log, No goal!.
*/

let isSoccerFan = false;

if (isSoccerFan === true) {
    console.log('Goal!');
} else {
    console.log('No goal!');
}

>>>
No goal!
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
03.003. True and False Values
=============================================================================================================

In the previous exercise, we wrote if/else statements. If a given condition were true, one block of code would run. 
If that condition were false, a different block of code would run. However, there are data types that are not booleans. 
Let's explore the concepts of true and false in variables that contain other data types, including strings and numbers.

In JavaScript, all variables and conditions have a truthy or falsy value.

let variableOne = 'I Exist!';
if (variableOne) {
// This code will run because variableOne contains a truthy value.
} else {
// This code will not run because the first block ran.
}
In the first line of the program above, a variable is created and set. The value of this variable is a string 
rather than a boolean. How does this program determine which code block to run?

The second line of this program checks a condition if (variableOne). In the previous exercise, 
we checked if a variable was equal to true or false. By only writing the name of the variable as the condition, 
we are checking the truthiness of the variableOne. In this case, variableOne contains a truthy value.

If we changed if (variableOne) to say if (variableTwo), that condition would evaluate to falsy 
because we have not created a variable called variableTwo in this program. In other words, 
variableOne is truthy and variableTwo is falsy.

All variables that have been created and set are truthy (and will evaluate to true if they are the condition 
of a control flow statement) unless they contain one of the seven values listed below:

false
0 and -0
"" and '' (empty strings)
null
undefined
NaN (Not a Number)
document.all (something you will rarely encounter)

There is an important distinction between a variable's value and its truthiness: variableOne's value is 
'I exist' because that is the data saved to the variable. variableOne is truthy because it exists and 
does not contain any of the seven falsy values listed above.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Change the value of wordCount so that Great! You've started your work! is logged to the console.
*/

let wordCount = 0;

if (wordCount == 0) {
  console.log("Great! You've started your work!");
} else {
  console.log('Better get to work!');
}

>>>
Great! You've started your work!
>>>

---------------------------------------------------------------------

/*
Change the value of favoritePhrase so that This string doesn't seem to be empty is logged to the console.
*/

let favoritePhrase = 'a';

if (favoritePhrase == 'a') {
  console.log("This string doesn't seem to be empty.");
} else {
  console.log('This string is definitely empty.');
}

>>>
This string doesn't seem to be empty.
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
03.004. True and False Values II
=============================================================================================================

In programming, we often evaluate whether or not an expression is true or truthy. Conveniently, 
JavaScript provides a shorthand notation for this.

let isRaining = true;
if (isRaining) {
   console.log('Carry an umbrella!');
} else {
  console.log('Enjoy the sun!');
}

In the example above, the condition is simply if (isRaining). In JavaScript, this is evaluating whether isRaining is truthy. 
If you read the code out loud to yourself, it sounds like a simple sentence: "If it's raining, carry an umbrella. 
Else, enjoy the sun!"

JavaScript provides an operator for swapping the truthiness and falsiness of values - the exclamation point (!). 
We can use this in conditional statements as shorthand to check if the value of a variable evaluates to false rather than true.

let isPhoneCharged = true; 
if (!isPhoneCharged) {
  console.log('Plug in your phone!');
} else {
  console.log('No need to charge!');
}

In the example above, the program checks if isPhoneCharged evaluates to false. Because isPhoneCharged is true, 
the second block of code will execute.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Use the ! operator to cause This string is definitely empty to log to the console.
*/

let favoritePhrase = 'a';

if (!favoritePhrase == 'a') {
  console.log("This string doesn't seem to be empty.");
} else {
  console.log('This string is definitely empty.');
}

>>>
This string is definitely empty.
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
03.005. Comparison Operators
=============================================================================================================

In addition to checking whether a variable evaluates to true or false, sometimes we need to compare variables 
to other values. We can achieve this with comparison operators.

There are two comparisons you might be familiar with:

Less than: <
Greater than: >
You may also recognize these:

Less than or equal to: <=
Greater than or equal to: >=
These comparisons evaluate to true or false.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Using let, write a variable named hungerLevel and set it equal to 5.
*/

let hungerLevel = 5;

>>>

>>>

---------------------------------------------------------------------

/*
Write an if/else statement that checks if hungerLevel is greater than 7. If so, log Time to eat!. Otherwise, log We can eat later!.
*/

let hungerLevel = 5;

if (hungerLevel > 7) {
  console.log("Time to eat!");
} else {
  console.log('We can eat later!');
}

>>>
We can eat later!
>>>

---------------------------------------------------------------------

/*
Notice that since hungerLevel is 5, the if statement evaluates to false. Therefore the else's code block runs.
Now set the hungerLevel variable equal to 10 and run your code again.
*/

let hungerLevel = 10;

if (hungerLevel > 7) {
  console.log("Time to eat!");
} else {
  console.log('We can eat later!');
}

>>>
Time to eat!
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
03.006. Comparison Operators II
=============================================================================================================

There are two more useful comparisons we can make. Often, we might want to check if two things are equal 
to each other or if they are not.

To check if two things equal each other, we write === (three = signs in a row).
To check if two things do not equal each other, we write !== (an exclamation with two = signs in a row).
It can be confusing when to use one = sign and when to use three === signs. Use a single = to assign a value 
to a variable. Use ===to compare the values of two different variables.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Create a variable named moonPhase and set it equal to full.
*/

let moonPhase = 'full';

>>>

>>>

---------------------------------------------------------------------

/*
Write an if/else statement that checks if the moon is full. If the moonPhase is full, log Howl! 
to the console, and if it is anything else, log I swear I am not a werewolf.

Notice the code inside the first block of curly braces { } ran. That's because moonPhase equals full, 
and therefore the condition evaluates to true.
*/

let moonPhase = 'full';

if (moonPhase == 'full') {
  console.log("Howl!");
} else {
  console.log('I swear I am not a werewolf.');
}

>>>
Howl!
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
03.007. else if Statements
=============================================================================================================

We've explored if/else statements that answer questions that are either yes or no. What can we do if we have a question 
that has multiple yes conditions, or multiple no conditions?

We can add more conditions to our if/else statement with else if. Check out how this fits into our current knowledge 
of if/else statements:

let stopLight = 'green';

if (stopLight === 'red') {
  console.log('Stop');
} else if (stopLight === 'yellow') {
  console.log('Slow down');
} else if (stopLight === 'green') {
  console.log('Go!');
} else {
  console.log('Caution, unknown!');
}

1. We created a variable named stopLight that is assigned to the string green.

2. Then, there's an if/else statement with multiple conditions, using else if. else if allows us to check multiple values 
of the stopLight variable and output different things based on its color.

3. The block ends with the singular else we have seen before. The else is a catch-all for any other situation. For instance, 
if the stopLight was blinking blue, the last else would catch it and return a default message.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
We all know that turning into a werewolf is not an instantaneous event. It happens in stages. So let's expand our program to accommodate that.
If the moon is mostly full, log Arms and legs are getting hairier. If the moon is mostly new, log Back on two feet.
If someone enters in an invalid moon phase, make sure to log Invalid moon phase in the else code block.
*/

let moonPhase = 'full';

if (moonPhase === 'full') {
  console.log('Howl!');
} else if (moonPhase === 'mostly full') {
  console.log('Arms and legs are getting hairier');
} else if (moonPhase === 'mostly new') {
  console.log('Back on two feet');
} else {
  console.log('Invalid moon phase');
}

>>>
Howl!
>>>

---------------------------------------------------------------------

/*
Set moonPhase to mostly full and run your code.
We expect Arms and legs are getting hairier to log to the console.
*/

let moonPhase = 'mostly full';

if (moonPhase === 'full') {
  console.log('Howl!');
} else if (moonPhase === 'mostly full') {
  console.log('Arms and legs are getting hairier');
} else if (moonPhase === 'mostly new') {
  console.log('Back on two feet');
} else {
  console.log('Invalid moon phase');
}Set moonPhase to mostly full and run your code.

We expect Arms and legs are getting hairier to log to the console.

>>>
Arms and legs are getting hairier
>>>

---------------------------------------------------------------------

/*
Set moonPhase to mostly new and run your code.
We expect Back on two feet to log to the console.
*/

let moonPhase = 'mostly new';

if (moonPhase === 'full') {
  console.log('Howl!');
} else if (moonPhase === 'mostly full') {
  console.log('Arms and legs are getting hairier');
} else if (moonPhase === 'mostly new') {
  console.log('Back on two feet');
} else {
  console.log('Invalid moon phase');
}

>>>
Back on two feet
>>>

---------------------------------------------------------------------

/*
Now set moonPhase to solar eclipse and run your code.
Since there is not an else if condition for solar eclipse, we expect the default else code block to run. You should see Invalid moon phase print to the console.
*/

let moonPhase = 'solar eclipse';

if (moonPhase === 'full') {
  console.log('Howl!');
} else if (moonPhase === 'mostly full') {
  console.log('Arms and legs are getting hairier');
} else if (moonPhase === 'mostly new') {
  console.log('Back on two feet');
} else {
  console.log('Invalid moon phase');
}

>>>
Invalid moon phase
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
03.008. Logical Operators
=============================================================================================================

We can translate certain thoughts into JavaScript code such as, "Are these things equal?" with ===, or, 
"Is one thing greater than another thing?" with >.

In English, sometimes we say "both of these things" or "either one of these things." 
Let's translate those phrases into JavaScript with special operators called logical operators.

To say "both must be true," we use &&.
To say "either can be true," we use ||.
For example:

if (stopLight === 'green' && pedestrians === false) {
  console.log('Go!');
} else {
  console.log('Stop');
}

In the example above, we make sure that the stopLight is 'green' and (&&) there are no pedestrians before we log Go!.
If either of those conditions is false, we log Stop.
Just like the operators we learned previously, these logical operators will return either true or false.

These logical operators are helpful when writing if/else statements since they let us make sure multiple variables are true or false. 
We can combine these operators with all of the ones we have learned throughout this lesson.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Let's say the werewolf can only become its wolf form when there is a full moon and a it's a foggy night.
We already have a moonPhase variable, so let's start with making a isFoggyNight variable set equal to true.
*/

let isFoggyNight = true;

>>>

>>>

---------------------------------------------------------------------

/*
Now, set moonPhase to 'full' again. Now that we have both conditions, let's write that in our if/else statement.
In the first condition of the if/else statement, check that moonPhase === 'full' and isFoggyNight is true, using &&.
Run the code.
*/

let moonPhase = 'full';
let isFoggyNight = true;

if (moonPhase === 'full' && isFoggyNight === true) {
  console.log('Howl!');
} else if (moonPhase === 'mostly full') {
  console.log('Arms and legs are getting hairier');
} else if (moonPhase === 'mostly new') {
  console.log('Back on two feet');
} else {
  console.log('Invalid moon phase');
}

>>>
Howl!
>>>

---------------------------------------------------------------------

/*
Now, change the isFoggyNight variable to equal false and run it again.
*/

let moonPhase = 'full';
let isFoggyNight = false;

if (moonPhase === 'full' && isFoggyNight === true) {
  console.log('Howl!');
} else if (moonPhase === 'mostly full') {
  console.log('Arms and legs are getting hairier');
} else if (moonPhase === 'mostly new') {
  console.log('Back on two feet');
} else {
  console.log('Invalid moon phase');
}

>>>
Invalid moon phase
>>>

---------------------------------------------------------------------

/*
The default else will print to the console. That's because && requires both moonPhase and isFoggyNight to be true 
to execute its code block.
Replace the && that you wrote in the previous steps with ||.
Make the if/else statement print Howl! if moonPhase is 'full' or if isFoggyNight is true.
Leave the moonPhase variable's value as 'full' and the isFoggyNight variable's value as false. Which block is executed?
*/

let moonPhase = 'full';
let isFoggyNight = false;

if (moonPhase === 'full' || isFoggyNight === true) {
  console.log('Howl!');
} else if (moonPhase === 'mostly full') {
  console.log('Arms and legs are getting hairier');
} else if (moonPhase === 'mostly new') {
  console.log('Back on two feet');
} else {
  console.log('Invalid moon phase');
}

>>>
Howl!
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
03.009. switch Statements
=============================================================================================================

Before we move on, let's circle back to else if statements.

Using else if is a great tool for when we have a few different conditions we'd like to consider.

else if is limited, however. If we want to write a program with 25 different conditions, 
like a JavaScript cash register, we'd have to write a lot of code, and it can be difficult to read and understand.

To deal with times when you need many else if conditions, we can turn to a switch statement to write more concise and readable code.

To a computer, a switch statement and an if/else statement are the same, but a switch statement 
can be easier for other humans to read. Part of being a good developer is writing code that both computers and other humans can read.

switch statements look like this:

let groceryItem = 'papaya';

switch (groceryItem) {
  case 'tomato':
    console.log('Tomatoes are $0.49');
    break;
  case 'lime':
    console.log('Limes are $1.49');
    break;
  case 'papaya':
    console.log('Papayas are $1.29');
    break;
  default:
    console.log('Invalid item');
    break;
}

The switch keyword initiates the statement and is followed by ( ... ), which contains the condition that each case will compare to. 
In the example, the condition is groceryItem.
Inside the block, { ... }, there are cases. case is like the else if part of an if/else if/else statement. 
The word following the first case is 'tomato'. If groceryItem equalled 'tomato', that case's console.log() would run.
groceryItem equals 'papaya', so the first and second case statements are skipped. The third case runs since the case is 'papaya', 
which matches groceryItem's value. This particular program will log Papayas are $1.29.
Then the program stops with the break keyword. This keyword will prevent the switch statement from executing any more of its code. 
Without adding break at the end of each case, the program will execute the code for all matching cases and the default code as well. 
This behavior is different from if/else conditional statements which execute only one block of code.
At the end of each switch statement, there is a default condition. If none of the cases are true, then this code will run.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
Let's illustrate this by converting our werewolf program to a switch statement. For now, 
let's also delete the isFoggyNight variable so it doesn't fog up this concept.
moonPhase will become the condition of the switch statement. Then, each moon phase will become each case that 
the switch statement checks for.
Start by writing a switch statement with moonPhase as its condition.
*/

let moonPhase = 'full';

switch (moonPhase) {
  case 'full':
    console.log('Howl!');
    break;
  case 'mostly full':
    console.log('Arms and legs are getting hairier');
    break;
  case 'mostly new':
    console.log('Back on two feet');
    break;
  default:
    console.log('Invalid moon phase');
    break;
}

>>>
Howl!
>>>

---------------------------------------------------------------------

/*
Then, write each else if condition as a case.
If moonPhase is 'full', then use console.log() to print Howl!.
If moonPhase is 'mostly full', then use console.log() to print Arms and legs are getting hairier.
If moonPhase is 'mostly new', then use console.log() to print Back on two feet.
Remember to add a break after each console.log(), like in the example in the instructions.
*/

let moonPhase = 'full';

switch (moonPhase) {
  case 'full':
    console.log('Howl!');
    break;
  case 'mostly full':
    console.log('Arms and legs are getting hairier');
    break;
  case 'mostly new':
    console.log('Back on two feet');
    break;
  default:
    console.log('Invalid moon phase');
    break;
}

>>>
Howl!
>>>

---------------------------------------------------------------------

/*
Now, add a default at the end of the switch that uses console.log() to print Invalid moon phase, 
in the case that moonPhase does not equal one of our cases.
*/

let moonPhase = 'full';

switch (moonPhase) {
  case 'full':
    console.log('Howl!');
    break;
  case 'mostly full':
    console.log('Arms and legs are getting hairier');
    break;
  case 'mostly new':
    console.log('Back on two feet');
    break;
  default:
    console.log('Invalid moon phase');
    break;
}

>>>
Howl!
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
03.010. Ternary Operator
=============================================================================================================

In the previous exercise, we learned shorthand for writing multiple if/else if/else statements to make them easier to read.
JavaScript also provides a way to shorten simple if/else statements called the ternary operator.

let isNightTime = true;

if (isNightTime) {
  console.log('Turn on the lights!');
} else {
  console.log('Turn off the lights!');
}

In the example above, we see a very familiar pattern. See the example below for an equivalent way to express this.

isNightTime ? console.log('Turn on the lights!') : console.log('Turn off the lights!');
The code in the example above will operate exactly as the code from the previous example. Let's break this example into its parts:

isNightTime ? — the conditional statement followed by a question mark. This checks if isNightTime is truthy.
console.log ('Turn on the lights!') — this code will be executed if the condition is truthy.
: — a colon separates the two different blocks of code that can be executed.
console.log('Turn off the lights!'); — this code will be executed if the condition is falsy
In this example, we checked if the value of a variable was true or false. 
The ternary operator can be used for any condition that can be evaluated to true or false, such as those with comparison operators.

age >= 16 ? console.log('You are old enough to drive in the United States!') : 
console.log('You are not old enough to drive in the United States!');

In the example above, the conditional statement is checking whether the value of the variable age is greater than or equal to 16. 
If so, a message that states the user is old enough to drive will be logged to the console. 
Otherwise, a message that states the user is not old enough to drive will be logged.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*

*/

>>>

>>>

---------------------------------------------------------------------

/*

*/

>>>

>>>

---------------------------------------------------------------------

/*

*/

>>>

>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
03.011.
=============================================================================================================

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------

----------------------------

>>>

>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================

=============================================================================================================

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------

----------------------------

>>>

>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================

=============================================================================================================

----------------------------------------------------------

----------------------------

----------------------------

>>>

>>>

----------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================

=============================================================================================================

----------------------------------------------------------

----------------------------

----------------------------

>>>

>>>

----------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================

=============================================================================================================

----------------------------------------------------------

----------------------------

----------------------------

>>>

>>>

----------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================

=============================================================================================================

----------------------------------------------------------

----------------------------

----------------------------

>>>

>>>

----------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================

=============================================================================================================

----------------------------------------------------------

----------------------------

----------------------------

>>>

>>>

----------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================

=============================================================================================================

----------------------------------------------------------

----------------------------

----------------------------

>>>

>>>

----------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================

=============================================================================================================

----------------------------------------------------------

----------------------------

----------------------------

>>>

>>>

----------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================

=============================================================================================================

----------------------------------------------------------

----------------------------

----------------------------

>>>

>>>

----------------------------------------------------------
